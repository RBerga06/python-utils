name: ci

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop
  release:
    types:
      - published


jobs:
  # Test on all supported platforms
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu", "macos", "windows" ]
        python: [ "3.11" ]  # python: [ "3.11", "3.12.0-alpha.7" ]
    runs-on: ${{matrix.os}}-latest
    steps:
    # Setup
    - uses: actions/checkout@v3
    - name: Set up Python ${{matrix.python}}
      uses: actions/setup-python@v3
      with:
        python-version: ${{matrix.python}}
    - name: Install poetry
      run: pip install poetry
    - name: Editable install
      run: poetry install --with=dev
    # Set environment variables
    - name: Env (FEAT_ALL)
      run: echo "FEAT_ALL=1" >> $GITHUB_ENV
      if: contains(github.event.pull_request.labels.*.name, 'feat:all')
    - name: Env (FEAT_CACHE)
      run: echo "FEAT_CACHE=1" >> $GITHUB_ENV
      if: contains(github.event.pull_request.labels.*.name, 'feat:cache')
    - name: Env (FEAT_PLUGINS)
      run: echo "FEAT_PLUGINS=1" >> $GITHUB_ENV
      if: contains(github.event.pull_request.labels.*.name, 'feat:plugins')
    - name: Env (FEAT_FUNC)
      run: echo "FEAT_FUNC=1" >> $GITHUB_ENV
      if: contains(github.event.pull_request.labels.*.name, 'feat:func')
    - name: Env (FEAT_OTHER)
      run: echo "FEAT_OTHER=1" >> $GITHUB_ENV
      if: contains(github.event.pull_request.labels.*.name, 'feat:other')
    # Test
    - name: Test
      run: poetry run pytest

  # (Platform/Python)-indipendent build: run once (ubuntu, python 3.11)
  build:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Build wheel
      run: pip wheel --no-deps -w dist .
    - id: find-artifacts
      name: Find built artifacts
      run: echo wheel=$(ls dist/*.whl) > $GITHUB_OUTPUT
      shell: bash
    - name: Upload wheel
      uses: actions/upload-artifact@v3
      with:
        name: wheel
        path: ${{steps.find-artifacts.outputs.wheel}}
    # Release
    - name: Release
      uses: fnkr/github-action-ghr@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GHR_PATH: ${{steps.find-artifacts.outputs.wheel}}
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
